buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "net.dumbcode.gradlehook:GradleHook:1.3.1"
        classpath "net.darkhax.curseforgegradle:CurseForgeGradle:1.0.11"
        classpath "org.kohsuke:github-api:1.114"
        classpath "org.ajoberstar.grgit:grgit-gradle:5.0.0"
        classpath "com.modrinth.minotaur:Minotaur:2.4.4"
    }
}


//buildscript.configurations.classpath.each { println it }

apply plugin: net.dumbcode.gradlehook.GradleWebhookPlugin
apply plugin: net.darkhax.curseforgegradle.CurseForgeGradlePlugin
apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin
apply plugin: com.modrinth.minotaur.Minotaur
apply plugin: 'maven-publish'

import javax.net.ssl.HttpsURLConnection
import java.nio.file.Files

archivesBaseName = project.archives_base_name
ext.versionDisplay = "${project.minecraft_version}-${getVersion()}"

ext.additionalProperties = new Properties()
if (file("extra.properties").exists()) {
    additionalProperties.load(file("extra.properties").newReader())
}

def getVersion() {
    if (project.hasProperty('currentTag')) {
        if (project.currentTag.startsWith("v")) {
            return project.currentTag.substring(1)
        }
        return project.currentTag
    }
    return project.mod_version
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

ext.curseReleaseType = "release"
ext.releaseChangelog = "No Changelog Available"
ext.stabilitySuffix = ""
ext.curseforgeDownloadLink = null
ext.modrinthDownloadLink = null
ext.githubDownloadLink = null
ext.releaseType = project.default_release_type

ext.mainFile = null


// https://github.com/TerraformersMC/GradleScripts/blob/2.5/ferry.gradle#L35
task generateChangelog {
    def changes = StringBuilder.newInstance()
    if (!project.hasProperty("lastTag") || !project.hasProperty("currentTag")) {
        println "Missing lastTag or currentTag parameters, aborting changelog creation"
        return;
    }
    def lastTag = project.getProperty("lastTag")
    def currentTag = project.getProperty("currentTag")
    def commits = "git log --max-count=$project.changelog_max_commit_search --pretty=format:\"%b\" $lastTag..$currentTag".execute()
    println "Last version: $lastTag"
    println "Current version: $currentTag"

    if (currentTag.contains("-alpha")) {
        releaseType = "alpha"
        curseReleaseType = "alpha"
        stabilitySuffix = " (Alpha)"
    } else if (currentTag.contains("-beta")) {
        releaseType = "beta"
        curseReleaseType = "beta"
        stabilitySuffix = " (Beta)"
    } else if (currentTag.contains("-pre")) {
        releaseType = "pre"
        curseReleaseType = "beta"
        stabilitySuffix = " (Pre-Release)"
    } else if (currentTag.contains("-rc")) {
        releaseType = "rc"
        curseReleaseType = "beta"
        stabilitySuffix = " (Release Candidate)"
    } else if (!currentTag.contains("-")) {
        releaseType = "stable"
    }
    println "Release type: $releaseType"

    commits.in.eachLine { line -> // Loops over the lines the git log command returns
        def processedLine = line.toString()
        if (processedLine.startsWith("\"")) {
            processedLine = processedLine.substring(1)
        }
        if (processedLine.endsWith("\"")) {
            processedLine = processedLine.substring(0, processedLine.length() - 1)
        }
        println "Reading line: $processedLine"

        if (processedLine.startsWith("- ")) {
            println "Adding changelog line:"
            println "  $processedLine"
            if (changes.length() == 0) {
                changes << processedLine
            } else {
                changes << "\n$processedLine"
            }
        }
    }
    commits.err.eachLine { line -> println line }
    commits.waitFor()
    println "Changelog:"
    releaseChangelog = changes.toString()
    if (releaseChangelog.isEmpty()) {
        releaseChangelog = "No Changelog Available"
    }
    println releaseChangelog
}

modrinth {
    if (additionalProperties["modrinth_token"] != null) {
        token = additionalProperties["modrinth_token"]
    } else if (System.getenv("modrinth_token") != null) {
        token = System.getenv("modrinth_token")
    } else {
        System.out.println("No token found...")
        return
    }
    projectId = project.modrinth_id
    versionNumber = versionDisplay
    versionName = "${archivesBaseName}-${versionDisplay}"
    versionType = curseReleaseType
    uploadFile = remapJar
    changelog = releaseChangelog
    gameVersions = [project.minecraft_version]
    loaders = ["fabric", "quilt"]
}

tasks.modrinth.doLast {
  if (tasks.modrinth.wasUploadSuccessful()) {
    modrinthDownloadLink = "https://modrinth.com/mod/$project.modrinth_slug/version/$versionDisplay"
    sendDiscordWebhook()
  }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (additionalProperties["curseforge_token"] != null) {
        apiToken = additionalProperties["curseforge_token"]
    } else if (System.getenv("curseforge_token") != null) {
        apiToken = System.getenv("curseforge_token")
    } else {
        System.out.println("No CurseForge token found...")
        return
    }

    mainFile = upload(project.curseforge_id, remapJar)
    mainFile.releaseType = 'release'
    mainFile.displayName = "${archivesBaseName}-${versionDisplay}"
    mainFile.changelog = releaseChangelog
    if (project.hasProperty("curse_dependencies")) {
        project.getProperty("curse_dependencies").split(' ').each { requirement ->
            mainFile.addRequirement(requirement)
        }
    }
    mainFile.addGameVersion(project.minecraft_version)
    mainFile.addModLoader('Fabric')
    mainFile.addModLoader('Quilt')
    mainFile.addJavaVersion('Java 17')
    mainFile.addJavaVersion('Java 18')
}

tasks.getByName("publishCurseForge").doLast {
    def fileId = mainFile.curseFileId
    curseforgeDownloadLink = "https://www.curseforge.com/minecraft/mc-mods/$project.curseforge_slug/files/$fileId";
    sendDiscordWebhook()
}

String getBranch() {
    def ENV = System.getenv()
    if (ENV.GITHUB_REF) {
        def branch = ENV.GITHUB_REF
        return branch.substring(branch.lastIndexOf("/") + 1)
    }

    if (grgit == null) {
        return "unknown"
    }

    def branch = grgit.branch.current().name
    return branch.substring(branch.lastIndexOf("/") + 1)
}

ext.createDiscordChangelog = { fullChangelogUrl ->
    def webhookChangelog = StringBuilder.newInstance()
    def changelogLines = releaseChangelog.split("\n")
    def maxLines = Integer.decode(project.discord_webhook_changelog_line_limit)
    if (changelogLines.length <= maxLines) {
        return releaseChangelog
    } else {
        def lines = 0
        changelogLines.find { line ->
            if (webhookChangelog.length() == 0) {
                webhookChangelog << line
            } else {
                webhookChangelog << "\n$line"
            }
            lines++
            if (lines >= maxLines) {
                webhookChangelog << "\n(+ " + (changelogLines.length - lines) + " more) See [Full Changelog]($fullChangelogUrl)"
                return true;
            }
        }
    }
    return webhookChangelog.toString()
}

void sendDiscordWebhook() {
    String webhook
    if (additionalProperties["discord_release_webhook"] != null) {
		webhook = additionalProperties["discord_release_webhook"]
	} else if (System.getenv("discord_release_webhook") != null) {
		webhook = System.getenv("discord_release_webhook")
	} else {
		System.out.println("No webhook found...")
		return
	}
    println "CurseForge download: $curseforgeDownloadLink"
    println "Modrinth download: $modrinthDownloadLink"
    println "GitHub download: $githubDownloadLink"
    if (curseforgeDownloadLink != null && modrinthDownloadLink != null && githubDownloadLink != null) {
        println "Preparing webhook"
        def release_url = modrinthDownloadLink
        def discordChangelog = createDiscordChangelog(release_url)

        def result = DiscordBuilder.createForm {
            embed {
                color = Integer.decode(project.project_color)
                author {
                    name = project.project_name + stabilitySuffix
                    url = project.project_url
                }
                thumbnail { url = project.project_logo }
                title = "$project.project_name-$version Released"
                url = release_url
                field {
                    name = "Changes:"
                    value = discordChangelog
                }
                field {
                    name = "Downloads:"
                    value = "[Modrinth]($modrinthDownloadLink)\n[CurseForge]($curseforgeDownloadLink)\n[GitHub]($githubDownloadLink)"
                }
            }
        }.send(webhook)

        println "Discord Webhook Response: " + result.responseCode
    }
}

task github {
	dependsOn build

    doLast {
        String gh_token
		if (additionalProperties["github_token"] != null) {
			gh_token = additionalProperties["github_token"]
		} else if (System.getenv("github_token") != null) {
			gh_token = System.getenv("github_token")
		} else {
			System.out.println("No GitHub token found...")
			return
		}
        def github = org.kohsuke.github.GitHub.connectUsingOAuth(gh_token as String)
        def repository = github.getRepository(System.getenv().GITHUB_REPOSITORY)

        def releaseBuilder = new org.kohsuke.github.GHReleaseBuilder(repository, project.getProperty("currentTag"))
        releaseBuilder.name("$project.project_name v$version for $project.minecraft_version")
        releaseBuilder.body(releaseChangelog)
        releaseBuilder.commitish(getBranch())
        if (releaseType != "stable") {
            releaseBuilder.prerelease(true)
        }

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(((AbstractArchiveTask) remapJar).getArchiveFile().get().getAsFile(), "application/java-archive");
        githubDownloadLink = ghRelease.getHtmlUrl()
        sendDiscordWebhook()
    }
}

task discord {
	dependsOn build

	doLast {
		String webhook
		if (additionalProperties["discord_webhook"] != null) {
			webhook = additionalProperties["discord_webhook"]
		} else if (System.getenv("discord_webhook") != null) {
			webhook = System.getenv("discord_webhook")
		} else {
			System.out.println("No webhook found...")
			return
		}

		String commitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()

		File file = remapJar.archiveFile.get().asFile
		String text = "**${project.archives_base_name} v${getVersion()} commit ${commitHash} for ${project.minecraft_version}**"
        def cmdLine = "git log --format=%B -n 1"
		def procCommit = cmdLine.execute()
		String changeLog = procCommit.in.getText()
        String action_url = System.getenv("action_url")
        def result = DiscordBuilder.createForm {
            embed {
                color = Integer.decode(project.project_color)
                author {
                    name = project.project_name + ' (Beta)'
                    url = project.project_url
                }
                thumbnail { url = project.project_logo }
                title = "v${version}-${commitHash}"
                url = System.getenv("action_url")
                field {
                    name = "Changes:"
                    value = changeLog
                }
                field {
                    name = "Downloads:"
                    value = "[GitHub](${action_url})"
                }
            }
        }.send(webhook)

        println "Discord Webhook Response: " + result.responseCode

	}

}


task publishThirdParty {
    dependsOn 'generateChangelog'
    dependsOn 'publishCurseForge'
    dependsOn 'modrinth'
    dependsOn 'github'
    tasks.findByName('publishCurseForge').mustRunAfter 'generateChangelog'
    tasks.findByName('modrinth').mustRunAfter 'publishCurseForge'
    tasks.findByName('github').mustRunAfter 'modrinth'
}
